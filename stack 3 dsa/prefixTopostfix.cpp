/*
üß†üí° PREFIX TO POSTFIX CONVERSION ‚Äì Hinglish Explanation

üìå Prefix Expression Format:
   ‚û§ Operator Operand1 Operand2
   ‚û§ Example: *+AB-CD ‚ûù means (A + B) * (C - D)

üéØ Goal:
Prefix expression ko Postfix expression me convert karna.
Postfix format: Operand1 Operand2 Operator

üõ†Ô∏è Is code ka kaam hai:
Prefix expression (jaise "-/*+79483") ko Postfix form me convert karna
Aur result string ke form me print karna jaise: 79+4*8/3-

üë£ LOGIC (Steps):
1Ô∏è‚É£ Ek **stack of strings** banao.
2Ô∏è‚É£ Expression ko **right se left** traverse karo (Prefix ka rule).
3Ô∏è‚É£ Agar character ek **digit** hai:
    ‚û§ usse string me convert karke stack me push karo.
4Ô∏è‚É£ Agar character ek **operator** hai (+, -, *, /):
    ‚û§ Stack ke top ke do values nikaalo (v1, v2)
    ‚û§ Ek string banao: v1 + v2 + operator (Postfix format)
    ‚û§ Is result string ko stack me push karo
5Ô∏è‚É£ End me stack ka top element hi final postfix expression hoga.

üîç Dry Run Example:
Prefix: -/*+79483

‚û°Ô∏è Traverse from right:
Push '3'
Push '8'
Push '4'
Push '9'
Push '7'
'+' => "7" + "9" + '+' ‚ûù "79+"
'*' => "79+" + "4" + '*' ‚ûù "79+4*"
'/' => "79+4*" + "8" + '/' ‚ûù "79+4*8/"
'-' => "79+4*8/" + "3" + '-' ‚ûù "79+4*8/3-"

üì§ Output: 79+4*8/3-

üìà TIME COMPLEXITY:
‚û°Ô∏è O(n) ‚Äì Har character ko ek hi baar process kiya ja raha hai

üì¶ SPACE COMPLEXITY:
‚û°Ô∏è O(n) ‚Äì Stack me maximum n elements ho sakte hain

üîÑ FLOWCHART (ASCII Style - Hinglish):

         +-------------------------+
         |      Start Program      |
         +-------------------------+
                    |
                    v
     +-----------------------------+
     | Traverse string from right  |
     +-----------------------------+
                    |
           +--------+--------+
           |                 |
     +-----v----+     +------v-----+
     | Is digit? |     | Is operator? |
     +----------+     +--------------+
           |                 |
         Yes               Yes
           |                 |
+----------------+    +---------------------------+
| Push to stack  |    | Pop 2 elements (v1, v2)   |
+----------------+    | Create: v1 + v2 + oper    |
                      | Push result back to stack |
                      +---------------------------+
                    |
                    v
            +---------------+
            | End of loop?  |
            +---------------+
                    |
                   Yes
                    |
            +--------------------+
            | Print stack.top()  |
            +--------------------+
                    |
                    v
               +----------+
               |   END    |
               +----------+

-------------------------------------------------------------------
*/

#include<iostream>
#include<stack>
#include<string>
using namespace std;

// üëâ Ye function do operands aur operator leta hai aur unhe Postfix form me jod kar return karta hai
string solve(string v1, string v2, char oper){
    string s = "";
    s += v1;            // pehla operand
    s += v2;            // doosra operand
    s.push_back(oper);  // operator ko last me add karo (Postfix rule)
    return s;           // final postfix expression return karo
}

int main(){
    string s = "-/*+79483"; // ‚úÖ Example prefix expression
    stack<string> val;      // üîÅ Stack to store intermediate postfix expressions

    // üîÑ Traverse prefix string from right to left
    for(int i = s.length() - 1; i >= 0; i--){
        int ascii  = (int)(s[i]);

        // üî¢ Agar current character ek digit hai (0-9)
        if(ascii >= 48 && ascii <= 57){
            // ‚ûï Char ko number string me convert karo aur push karo
            val.push(to_string(ascii - 48)); // '7' ‚ûù 55 ‚ûù 55 - 48 = 7
        }
        else{
            // üî£ Agar operator mila (+, -, *, /)
            string v1 = val.top(); val.pop(); // üîΩ Pehla operand nikaalo
            string v2 = val.top(); val.pop(); // üîΩ Doosra operand nikaalo
            string result = solve(v1, v2, s[i]); // üîß Postfix banaye
            val.push(result); // üîô Stack me push karo
        }
    }

    // ‚úÖ Final result stack ke top me hoga
    cout << "Postfix Expression: " << val.top() << endl;

    return 0;
}

/*
üü¢ OUTPUT:
Postfix Expression: 79+4*8/3-

üìù Explanation:
Prefix Expression "-/*+79483" ko Postfix me convert kiya gaya:
1. + ‚ûù 7+9 ‚ûù 79+
2. * ‚ûù 79+ * 4 ‚ûù 79+4*
3. / ‚ûù 79+4* / 8 ‚ûù 79+4*8/
4. - ‚ûù 79+4*8/ - 3 ‚ûù 79+4*8/3-

‚úÖ Final Postfix: 79+4*8/3-

üìä Time Complexity: O(n)
üì¶ Space Complexity: O(n)
*/
