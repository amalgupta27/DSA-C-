#include <vector>
#include <iostream>
using namespace std;
/*
******************************************************
* ЁЯУМ рдЗрд╕ рдХреЛрдб рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп: Pivot Index рдЦреЛрдЬрдирд╛
*
* ЁЯФ╣ рджрд┐рдпрд╛ рдЧрдпрд╛: рдПрдХ array `nums[]`
* ЁЯФ╣ рд╣рдореЗрдВ рд╡рд╣ `index` рдвреВрдВрдврдирд╛ рд╣реИ рдЬрд╣рд╛рдБ:
*      `leftSum == rightSum`
*
* ЁЯОп рд╣рдорд╛рд░реА Approach:
*   1я╕ПтГг рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ, рдкреВрд░реЗ array рдХрд╛ **total sum** рдирд┐рдХрд╛рд▓реЛред
*   2я╕ПтГг рд╣рд░ index `i` рдкрд░:
*       ЁЯФ╕ rightSum рдирд┐рдХрд╛рд▓реЛ тЖТ `totalSum - leftSum - nums[i]`
*       ЁЯФ╕ рдЕрдЧрд░ `leftSum == rightSum` рддреЛ рд╡рд╣реА **pivot index**
*       ЁЯФ╕ leftSum рдХреЛ update рдХрд░рддреЗ рдЬрд╛рдУред
*   3я╕ПтГг рдЕрдЧрд░ рдХреЛрдИ pivot index рдирд╣реАрдВ рдорд┐рд▓рд╛, рддреЛ **-1 return** рдХрд░реЛред
*
* тП│ Complexity:
*   - **O(n) time**, **O(1) space**
******************************************************
*/

class Solution {
    public:
        int pivotIndex(vector<int>& nums) {
            int n = nums.size();  // ЁЯФ╣ Array рдХрд╛ size (рдХрд┐рддрдиреЗ elements рд╣реИрдВ)
            int leftSum = 0, totalSum = 0;  // ЁЯФ╣ Left sum рдФрд░ total sum рдХреЛ 0 рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ
            
            // ЁЯФ╣ Step 1: рдкреВрд░рд╛ `totalSum` рдирд┐рдХрд╛рд▓реЗрдВ (array рдХреЗ рд╕рднреА elements рдХрд╛ рдпреЛрдЧ рдХрд░реЗрдВ)
            for (auto x : nums) totalSum += x;
    
            // ЁЯФ╣ Step 2: рд╣рд░ index рдкрд░ rightSum рдирд┐рдХрд╛рд▓реЗрдВ рдФрд░ check рдХрд░реЗрдВ
            for (int i = 0; i < n; i++) {
                int rightSum = totalSum - leftSum - nums[i];  // ЁЯУМ Right sum рдирд┐рдХрд╛рд▓реЗрдВ
                
                // тЬЕ рдЕрдЧрд░ leftSum == rightSum, рддреЛ pivot index рдорд┐рд▓ рдЧрдпрд╛
                if (leftSum == rightSum) {
                    return i;  
                }
                
                // ЁЯФ╣ leftSum рдХреЛ update рдХрд░реЗрдВ (рдЕрдЧрд▓реЗ index рдХреЗ рд▓рд┐рдП)
                leftSum += nums[i];
            }
    
            // тЭМ рдХреЛрдИ pivot index рдирд╣реАрдВ рдорд┐рд▓рд╛, рддреЛ -1 return рдХрд░реЗрдВ
            return -1;
        }
    };
    
    /**
     * ЁЯОп рдЗрд╕ class рдХреЛ рдРрд╕реЗ use рдХрд░реЗрдВ:
     *
     *  vector<int> nums = {1, 7, 3, 6, 5, 6};  // Example array
     *  Solution obj;
     *  
     *  cout << obj.pivotIndex(nums);  // ЁЯФ╣ Output: 3
     */
    