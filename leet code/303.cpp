
#include<bits/stdc++.h>
using namespace std;
/*
*******************************************************
* ЁЯТб рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди: Prefix Sum Method
*   - рджрд┐рдП рдЧрдП array `nums` рдореЗрдВ рд╕реЗ рдХрд┐рд╕реА рднреА range `[left, right]`
*     рдХрд╛ sum рдирд┐рдХрд╛рд▓рдирд╛ рд╣реИред
*   - рд╣рд░ рдмрд╛рд░ sum рдирд┐рдХрд╛рд▓рдиреЗ рдХреА рдмрдЬрд╛рдп, рдПрдХ prefix sum array (`pre[]`)
*     рдмрдирд╛рдПрдВрдЧреЗ, рддрд╛рдХрд┐ рд╣рдо **O(1) рдореЗрдВ** рдЙрддреНрддрд░ рдирд┐рдХрд╛рд▓ рд╕рдХреЗрдВред
*
* ЁЯОп Prefix Sum logic:
*   - `pre[i]` store рдХрд░реЗрдЧрд╛ `nums[0]` рд╕реЗ `nums[i]` рддрдХ рдХрд╛ sumред
*   - рдЗрд╕ рддрд░рд╣ рд╕реЗ, рдЕрдЧрд░ рд╣рдореЗрдВ `[left, right]` рдХрд╛ sum рдЪрд╛рд╣рд┐рдП, рддреЛ:
*     ЁЯФ╣ рдЕрдЧрд░ `left == 0`, рддреЛ `pre[right]` return рдХрд░реЗрдВред
*     ЁЯФ╣ рдЕрдиреНрдпрдерд╛, `pre[right] - pre[left-1]` return рдХрд░реЗрдВред
*
* тП│ рдЯрд╛рдЗрдо рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕рд┐рдЯреА:
*   - **Prefix Sum рдмрдирд╛рдирд╛:** O(n)
*   - **рд╣рд░ query рдХрд╛ рдЙрддреНрддрд░:** O(1)
*
*******************************************************
*/

class NumArray {
    public:
        vector<int> pre;  // ЁЯУМ Prefix sum array рдмрдирд╛рдПрдБ
    
        // ЁЯФ╣ Constructor: Prefix sum array рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        NumArray(vector<int>& nums) {
            int n = nums.size();  // ЁЯУМ Array рдХрд╛ size рдкрддрд╛ рдХрд░реЗрдВ
            pre.resize(n);        // ЁЯУМ Prefix sum array рдХреЛ resize рдХрд░реЗрдВ
            
            // ЁЯЯв рдкрд╣рд▓реЗ element рдХреЛ initialize рдХрд░реЗрдВ
            pre[0] = nums[0];
    
            // ЁЯЯв рдмрд╛рдХреА prefix sum рдмрдирд╛рдПрдБ
            for (int i = 1; i < n; i++) {
                pre[i] = nums[i] + pre[i - 1];  // `pre[i]` = `nums[i]` + `pre[i-1]`
            }
        }
        
        // ЁЯФ╣ рдХрд┐рд╕реА рднреА range [left, right] рдХрд╛ sum return рдХрд░реЗрдВ
        int sumRange(int left, int right) {
            // ЁЯЯв рдЕрдЧрд░ left = 0 рд╣реИ, рддреЛ pre[right] return рдХрд░реЗрдВ
            if (left == 0) return pre[right];
            
            // ЁЯЯв рдЕрдиреНрдпрдерд╛, pre[right] - pre[left-1] return рдХрд░реЗрдВ
            return pre[right] - pre[left - 1];
        }
    };
    
    /**
     * ЁЯОп рдЗрд╕ class рдХреЛ рдРрд╕реЗ use рдХрд░реЗрдВ:
     *
     *  vector<int> nums = {1, 2, 3, 4, 5};  // Example array
     *  NumArray* obj = new NumArray(nums);  // Prefix Sum Object рдмрдирд╛рдПрдБ
     *  
     *  cout << obj->sumRange(1, 3);  // ЁЯФ╣ Output: 2 + 3 + 4 = 9
     *  cout << obj->sumRange(0, 2);  // ЁЯФ╣ Output: 1 + 2 + 3 = 6
     */
    